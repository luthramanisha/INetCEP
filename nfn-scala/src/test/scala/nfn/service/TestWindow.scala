package nfn.service
import java.time.LocalTime
import java.time.format.DateTimeFormatter

import org.junit.Assert._
import org.junit.Test
import config.StaticConfig
import nfn.tools.Helpers

class TestWindow {
  val sacepicnEnv = StaticConfig.systemPath
  val line1 = "6977,1377986405,0,1,0,0,0"
  val line2 = "22:18:38.841/Building A/O/L"
  val line3 = "6977,1378033205,0,1,0,0,0"
  val sensorPath1 = "plug1"
  val sensorPath2 = "victims"
  val sensorPath3 = "plug0"
  val sensorPath4 = "gps1"

  @Test def getDelimiterFromPathTest ={
    val window = new Window()
    val delimiter1 = Helpers.getDelimiterFromPath(sensorPath1)
    val delimiter2 = Helpers.getDelimiterFromPath(sensorPath2)
    assertEquals(",",delimiter1)
    assertEquals("/",delimiter2)
  }

  @Test def getDelimiterFromLineTest ={
    val window = new Window()
    val delimiter1 = Helpers.getDelimiterFromLine(line1)
    val delimiter2 = Helpers.getDelimiterFromLine(line2)
    assertEquals(",",delimiter1)
    assertEquals("/",delimiter2)
  }


  @Test def getDatePositionTest = {
    val window = new Window()
    val delimiter1 = Helpers.getDelimiterFromLine(line1)
    val delimiter2 = Helpers.getDelimiterFromLine(line2)
    val datePosition1 = Helpers.getDatePosition(delimiter1)
    val datePosition2 = Helpers.getDatePosition(delimiter2)
    assertEquals(1,datePosition1)
    assertEquals(0,datePosition2)
  }

  @Test def getValuePositionTest ={
    val window = new Window()
    val delimiter1 = Helpers.getDelimiterFromLine(line1)
    val delimiter2 = Helpers.getDelimiterFromLine(line2)
    val valPosition1 = Helpers.getValuePosition(delimiter1)
    val valPosition2 = Helpers.getValuePosition(delimiter2)
    assertEquals(2,valPosition1)
    assertEquals(1,valPosition2)
  }

  @Test def parseTimeTest = {

    val window = new Window()
    val delimiter1 = Helpers.getDelimiterFromLine(line1)
    val delimiter2 = Helpers.getDelimiterFromLine(line2)
    val delimiter3 = Helpers.getDelimiterFromLine(line3)
    val datePosition1 = Helpers.getDatePosition(delimiter1)
    val datePosition2 = Helpers.getDatePosition(delimiter2)
    val datePosition3 = Helpers.getDatePosition(delimiter3)
    val timeVal1 = line1.split(delimiter1)(datePosition1)
    val timeVal2 = line2.split(delimiter2)(datePosition2)
    val timeVal3 = line3.split(delimiter3)(datePosition3)
    assertEquals("00:00:05", Helpers.parseTime(timeVal1, delimiter1).toString)
    assertEquals("22:18:38.841", Helpers.parseTime(timeVal2, delimiter2).toString)
    assertEquals("13:00:05", Helpers.parseTime(timeVal3, delimiter3).toString)
  }
  /*@Test
  def readVictimsSensorTest()={
    val window = new Window()
    val path = sensorPath2
    val lb = "22:18:36.800"
    val ub = "22:18:44.001"
    val DateTimeFormat = DateTimeFormatter.ofPattern("HH:mm:ss.SSS")
    val lbDate = LocalTime.parse(lb, DateTimeFormat)
    val ubDate = LocalTime.parse(ub, DateTimeFormat)
    val output = window.readFile(path,lbDate,ubDate,"debugTest")
    //System.out.println("Victims Sensor Data: ")
    //System.out.println(output)
    val expectedOutput = "22:18:38.841/1001/M/50\n22:18:39.841/1002/F/40\n22:18:40.841/1003/F/22\n22:18:41.841/1004/M/8\n22:18:42.841/1005/F/6\n22:18:43.841/1006/M/25"
    assertEquals(expectedOutput,output)
  }

  @Test
  def readPlug1SensorTest(): Unit ={
    val window = new Window()
    val path = sensorPath1
    val lb = "16:22:00.000"
    val ub = "16:27:00.000"
    val DateTimeFormat = DateTimeFormatter.ofPattern("HH:mm:ss.SSS")
    val lbDate = LocalTime.parse(lb, DateTimeFormat)
    val ubDate = LocalTime.parse(ub, DateTimeFormat)
    val output = window.readFile(path,lbDate,ubDate,"debugTest")
    //System.out.println("Second Plug Sensor Data: ")
    //System.out.println(output)
    val expectedOutput = "1720891960,1379082120,62.88,1,1,0,0\n1720895606,1379082122,63.344,1,1,0,0\n1720899576,1379082124,63.152,1,1,0,0\n1720903554,1379082126,72.031,1,1,0,0\n1720906316,1379082128,70.334,1,1,0,0\n1720910498,1379082130,56.158,1,1,0,0\n1720914200,1379082132,58.032,1,1,0,0\n1720917548,1379082134,65.678,1,1,0,0\n1720923614,1379082137,63.556,1,1,0,0\n1720924838,1379082138,68.91,1,1,0,0\n1720928482,1379082140,63.556,1,1,0,0\n1720932104,1379082142,58.558,1,1,0,0\n1720935404,1379082144,62.88,1,1,0,0\n1720940816,1379082147,57.324,1,1,0,0\n1720943338,1379082148,55.347,1,1,0,0\n1720946362,1379082150,68.162,1,1,0,0\n1720949978,1379082152,62.88,1,1,0,0\n1720954272,1379082154,71.586,1,1,0,0\n1720957296,1379082156,62.88,1,1,0,0\n1720960912,1379082158,67.827,1,1,0,0\n1720965205,1379082160,71.982,1,1,0,0\n1720968587,1379082162,65.883,1,1,0,0\n1720972290,1379082164,64.333,1,1,0,0\n1720976142,1379082166,54.566,1,1,0,0\n1720979830,1379082168,59.803,1,1,0,0\n1720982928,1379082170,66.435,1,1,0,0\n1720986779,1379082172,61.514,1,1,0,0\n1720990764,1379082174,64.927,1,1,0,0\n1720994932,1379082177,62.88,1,1,0,0\n1720997340,1379082178,67.88,1,1,0,0\n1721001302,1379082180,71.701,1,1,0,0\n1721006476,1379082183,68.188,1,1,0,0\n1721010666,1379082185,56.86,1,1,0,0\n1721014395,1379082187,62.88,1,1,0,0\n1721017398,1379082189,57.864,1,1,0,0\n1721021939,1379082191,54.267,1,1,0,0\n1721025257,1379082193,69.419,1,1,0,0\n1721028596,1379082195,55.65,1,1,0,0\n1721032846,1379082197,68.931,1,1,0,0\n1721036518,1379082199,72.171,1,1,0,0\n1721039574,1379082201,62.88,1,1,0,0\n1721043852,1379082203,60.479,1,1,0,0\n1721047150,1379082205,70.162,1,1,0,0\n1721051392,1379082207,59.842,1,1,0,0\n1721054081,1379082209,56.384,1,1,0,0\n1721058348,1379082211,63.25,1,1,0,0\n1721061704,1379082213,62.728,1,1,0,0\n1721065974,1379082215,69.283,1,1,0,0\n1721069029,1379082217,69.314,1,1,0,0\n1721073011,1379082219,57.017,1,1,0,0\n1721075762,1379082221,67.543,1,1,0,0\n1721079584,1379082223,56.571,1,1,0,0\n1721084796,1379082226,67.054,1,1,0,0\n1721089692,1379082228,72.075,1,1,0,0\n1721091188,1379082229,62.88,1,1,0,0\n1721094508,1379082231,53.92,1,1,0,0\n1721098856,1379082233,62.88,1,1,0,0\n1721102206,1379082235,68.34,1,1,0,0\n1721106102,1379082237,62.88,1,1,0,0\n1721111200,1379082240,71.902,1,1,0,0\n1721114523,1379082242,65.272,1,1,0,0\n1721118812,1379082244,62.88,1,1,0,0\n1721120976,1379082245,71.787,1,1,0,0\n1721125638,1379082248,61.359,1,1,0,0\n1721127456,1379082249,62.88,1,1,0,0\n1721131114,1379082251,67.99,1,1,0,0\n1721136245,1379082254,70.019,1,1,0,0\n1721139863,1379082256,65.302,1,1,0,0\n1721144689,1379082259,60.751,1,1,0,0\n1721144691,1379082259,61.54,1,1,0,0\n1721150802,1379082262,59.939,1,1,0,0\n1721152333,1379082263,57.126,1,1,0,0\n1721155968,1379082265,59.916,1,1,0,0\n1721160787,1379082268,55.255,1,1,0,0\n1721164718,1379082270,62.88,1,1,0,0\n1721170823,1379082273,62.432,1,1,0,0\n1721170824,1379082273,62.88,1,1,0,0\n1721173924,1379082275,58.953,1,1,0,0\n1721177562,1379082277,62.841,1,1,0,0\n1721180610,1379082279,54.677,1,1,0,0\n1721186034,1379082282,62.88,1,1,0,0\n1721188248,1379082283,61.534,1,1,0,0\n1721191260,1379082285,66.251,1,1,0,0\n1721197191,1379082288,56.558,1,1,0,0\n1721201820,1379082291,66.698,1,1,0,0\n1721201822,1379082291,71.03,1,1,0,0\n1721205837,1379082293,62.204,1,1,0,0\n1721211846,1379082296,59.635,1,1,0,0\n1721216990,1379082299,57.991,1,1,0,0\n1721216991,1379082299,71.247,1,1,0,0\n1721220417,1379082301,62.204,1,1,0,0\n1721227900,1379082305,62.204,1,1,0,0\n1721231277,1379082307,62.204,1,1,0,0\n1721231278,1379082307,53.731,1,1,0,0\n1721234998,1379082309,53.839,1,1,0,0\n1721239235,1379082311,62.204,1,1,0,0\n1721242618,1379082313,63.499,1,1,0,0\n1721246776,1379082315,62.204,1,1,0,0\n1721250098,1379082317,61.528,1,1,0,0\n1721253112,1379082319,66.702,1,1,0,0\n1721257361,1379082321,64.659,1,1,0,0\n1721264716,1379082325,54.1,1,1,0,0\n1721268022,1379082327,65.874,1,1,0,0\n1721270112,1379082328,64.619,1,1,0,0\n1721274975,1379082331,61.528,1,1,0,0\n1721274976,1379082331,54.632,1,1,0,0\n1721282858,1379082335,61.528,1,1,0,0\n1721286544,1379082337,53.902,1,1,0,0\n1721288633,1379082338,58.901,1,1,0,0\n1721294172,1379082341,60.328,1,1,0,0\n1721296890,1379082343,69.793,1,1,0,0\n1721301122,1379082345,61.528,1,1,0,0\n1721302905,1379082346,65.277,1,1,0,0\n1721308384,1379082349,59.079,1,1,0,0\n1721312342,1379082351,56.816,1,1,0,0\n1721312343,1379082351,70.476,1,1,0,0\n1721316002,1379082353,61.528,1,1,0,0\n1721318964,1379082355,61.528,1,1,0,0\n1721323606,1379082357,62.2,1,1,0,0\n1721326604,1379082359,61.528,1,1,0,0\n1721329628,1379082361,64.831,1,1,0,0\n1721334200,1379082363,54.818,1,1,0,0\n1721341260,1379082367,67.684,1,1,0,0\n1721344840,1379082369,56.842,1,1,0,0\n1721349098,1379082371,58.253,1,1,0,0\n1721350296,1379082372,63.299,1,1,0,0\n1721352126,1379082373,65.559,1,1,0,0\n1721355864,1379082375,61.528,1,1,0,0\n1721359030,1379082377,59.827,1,1,0,0\n1721362971,1379082379,66.133,1,1,0,0"
    assertEquals(expectedOutput,output)
  }

  @Test
  def readPlug2SensorTest(): Unit ={
    val window = new Window()
    val path = sensorPath3
    val lb = "16:22:00.000"
    val ub = "16:27:00.000"
    val DateTimeFormat = DateTimeFormatter.ofPattern("HH:mm:ss.SSS")
    val lbDate = LocalTime.parse(lb, DateTimeFormat)
    val ubDate = LocalTime.parse(ub, DateTimeFormat)
    val output = window.readFile(path,lbDate,ubDate,"debugTest")
    //System.out.println("First Plug Sensor Data: ")
    //System.out.println(output)
    val expectedOutput = "1720897833,1379082123,19.375,1,0,0,0\n1720908768,1379082129,18.503,1,0,0,0\n1720917546,1379082134,20.18,1,0,0,0\n1720928480,1379082140,18.9,1,0,0,0\n1720937244,1379082145,20.233,1,0,0,0\n1720946360,1379082150,20.093,1,0,0,0\n1720957294,1379082156,19.375,1,0,0,0\n1720967319,1379082161,18.073,1,0,0,0\n1720976140,1379082166,19.877,1,0,0,0\n1720986777,1379082172,19.375,1,0,0,0\n1720994929,1379082177,17.903,1,0,0,0\n1721006473,1379082183,20.357,1,0,0,0\n1721016026,1379082188,20.142,1,0,0,0\n1721026815,1379082194,19.375,1,0,0,0\n1721036515,1379082199,20.741,1,0,0,0\n1721045481,1379082204,19.183,1,0,0,0\n1721055976,1379082210,20.093,1,0,0,0\n1721065971,1379082215,19.375,1,0,0,0\n1721075759,1379082221,21.392,1,0,0,0\n1721084794,1379082226,18.207,1,0,0,0\n1721094505,1379082231,21.524,1,0,0,0\n1721106099,1379082237,21.496,1,0,0,0\n1721114522,1379082242,20.093,1,0,0,0\n1721125636,1379082248,21.946,1,0,0,0\n1721134503,1379082253,19.737,1,0,0,0\n1721144688,1379082259,19.725,1,0,0,0\n1721153794,1379082264,21.33,1,0,0,0\n1721162639,1379082269,19.862,1,0,0,0\n1721173921,1379082275,19.375,1,0,0,0\n1721182170,1379082280,20.961,1,0,0,0\n1721191258,1379082285,21.844,1,0,0,0\n1721201818,1379082291,20.093,1,0,0,0\n1721211844,1379082296,20.093,1,0,0,0\n1721222464,1379082302,20.093,1,0,0,0\n1721231274,1379082307,18.327,1,0,0,0\n1721241054,1379082312,20.743,1,0,0,0\n1721250964,1379082318,18.192,1,0,0,0\n1721261104,1379082323,19.864,1,0,0,0\n1721271670,1379082329,19.491,1,0,0,0\n1721281046,1379082334,20.093,1,0,0,0\n1721291980,1379082340,18.529,1,0,0,0\n1721301120,1379082345,20.482,1,0,0,0\n1721310166,1379082350,21.009,1,0,0,0\n1721321504,1379082356,19.236,1,0,0,0\n1721329626,1379082361,19.336,1,0,0,0\n1721341258,1379082367,21.87,1,0,0,0\n1721350294,1379082372,17.674,1,0,0,0\n1721360910,1379082378,20.86,1,0,0,0\n1721370036,1379082383,20.093,1,0,0,0\n1721379102,1379082388,19.394,1,0,0,0\n1721389086,1379082394,20.093,1,0,0,0\n1721398766,1379082399,22.064,1,0,0,0\n1721408233,1379082404,17.526,1,0,0,0\n1721418576,1379082410,20.093,1,0,0,0\n1721428623,1379082415,20.178,1,0,0,0"
    assertEquals(expectedOutput,output)
  }

  @Test
  def readGPS1SensorTest(): Unit ={
    val window = new Window()
    val path = sensorPath4
    val lb = "15:23:00.000"
    val ub = "15:24:27.000"
    val DateTimeFormat = DateTimeFormatter.ofPattern("HH:mm:ss.SSS")
    val lbDate = LocalTime.parse(lb, DateTimeFormat)
    val ubDate = LocalTime.parse(ub, DateTimeFormat)
    val output = window.readFile(path,lbDate,ubDate,"debugTest")
    //System.out.println("First GPS Sensor Data: ")
    //System.out.println(output)
    //val expectedOutput = "1720897833,1379082123,19.375,1,0,0,0\n1720908768,1379082129,18.503,1,0,0,0\n1720917546,1379082134,20.18,1,0,0,0\n1720928480,1379082140,18.9,1,0,0,0\n1720937244,1379082145,20.233,1,0,0,0\n1720946360,1379082150,20.093,1,0,0,0\n1720957294,1379082156,19.375,1,0,0,0\n1720967319,1379082161,18.073,1,0,0,0\n1720976140,1379082166,19.877,1,0,0,0\n1720986777,1379082172,19.375,1,0,0,0\n1720994929,1379082177,17.903,1,0,0,0\n1721006473,1379082183,20.357,1,0,0,0\n1721016026,1379082188,20.142,1,0,0,0\n1721026815,1379082194,19.375,1,0,0,0\n1721036515,1379082199,20.741,1,0,0,0\n1721045481,1379082204,19.183,1,0,0,0\n1721055976,1379082210,20.093,1,0,0,0\n1721065971,1379082215,19.375,1,0,0,0\n1721075759,1379082221,21.392,1,0,0,0\n1721084794,1379082226,18.207,1,0,0,0\n1721094505,1379082231,21.524,1,0,0,0\n1721106099,1379082237,21.496,1,0,0,0\n1721114522,1379082242,20.093,1,0,0,0\n1721125636,1379082248,21.946,1,0,0,0\n1721134503,1379082253,19.737,1,0,0,0\n1721144688,1379082259,19.725,1,0,0,0\n1721153794,1379082264,21.33,1,0,0,0\n1721162639,1379082269,19.862,1,0,0,0\n1721173921,1379082275,19.375,1,0,0,0\n1721182170,1379082280,20.961,1,0,0,0\n1721191258,1379082285,21.844,1,0,0,0\n1721201818,1379082291,20.093,1,0,0,0\n1721211844,1379082296,20.093,1,0,0,0\n1721222464,1379082302,20.093,1,0,0,0\n1721231274,1379082307,18.327,1,0,0,0\n1721241054,1379082312,20.743,1,0,0,0\n1721250964,1379082318,18.192,1,0,0,0\n1721261104,1379082323,19.864,1,0,0,0\n1721271670,1379082329,19.491,1,0,0,0\n1721281046,1379082334,20.093,1,0,0,0\n1721291980,1379082340,18.529,1,0,0,0\n1721301120,1379082345,20.482,1,0,0,0\n1721310166,1379082350,21.009,1,0,0,0\n1721321504,1379082356,19.236,1,0,0,0\n1721329626,1379082361,19.336,1,0,0,0\n1721341258,1379082367,21.87,1,0,0,0\n1721350294,1379082372,17.674,1,0,0,0\n1721360910,1379082378,20.86,1,0,0,0\n1721370036,1379082383,20.093,1,0,0,0\n1721379102,1379082388,19.394,1,0,0,0\n1721389086,1379082394,20.093,1,0,0,0\n1721398766,1379082399,22.064,1,0,0,0\n1721408233,1379082404,17.526,1,0,0,0\n1721418576,1379082410,20.093,1,0,0,0\n1721428623,1379082415,20.178,1,0,0,0"
    //assertEquals(expectedOutput,output)
  }*/

  @Test
  def readGPS1SensorTest()={
    val window = new Window()
    val path = sensorPath4
    var a = 0
    val executionTimes = 10
    for (a <- 1 to executionTimes){
      System.out.println("5 Seconds of Sensor Data: ")
      System.out.println(window.readRelativeTimedSensor(path,5,"S","debugTest"))
    }
  }

}
